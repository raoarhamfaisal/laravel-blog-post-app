# Going Live with docker
// in host
docker run -dit -p 80:80 ubuntu:22.04
// in docker ubuntu container terminal
apt update
apt install nginx // to download web server on my docker vps
/etc/init.d/nginx start // start the nginx server on my docker vps
apt install curl nano php-cli unzip php8.1-fpm php-mysql php-mbstring php-xml php-bcmath php-curl php8.1-gd 
pwd //  to check the current directory
cd ~ //to go to the root directory
curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
apt install mysql-server
/etc/init.d/mysql start
mysql
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password by 'qwertyqwerty';
exit
mysql_secure_installation// no yes ...
mysql -u root -p // to enter only that user
create database laravalblogpost;
CREATE USER 'ourappuser'@'%' IDENTIFIED WITH mysql_native_password BY 'qwertyqwerty';
GRANT ALL ON laravalblogpost.* TO 'ourappuser'@'%';
exit
// in host
pwd // to get teh directory path
docker cp "/home/arham/Documents/Laravel Practice/laravel-first-app" infallible_dhawan:/var/www/ourapp

// in docker ubuntu container terminal
cd ourapp
cd /etc/nginx/sites-available
rm default
touch default
nano default // here we tell server that we want to use php (user docker-nginx file paste)
/etc/init.d/nginx restart
/etc/init.d/php8.1-fpm start
cd /var/www/ourapp
chown -R www-data:www-data storage
php artisan storage:link
nano .env // check nano credential to match with above  set db cred and also change APP_ENV=production APP_DEBUG=false
php artisan migrate

// for docker to make the docker run services 
touch /ourstartup 
nano /ourstartup //paste all start commands
   #!/bin/bash
   /etc/init.d/mysql start
   /etc/init.d/php8.1-fpm start
   /etc/init.d/nginx start
chmod u+x /ourstartup
/ourstartup to start
// for cron jobs and redis for client side cache and performance see 14.4 video




#composer commands
composer create-project laravel/laravel laravel-first-app
php artisan serve



# controller
php artisan make:controller ExampleController
php artisan make:migration create_posts_table
php artisan make:model post
php artisan make:policy PostPolicy  --model=Post


#migrations
php artisan migrate //run the migrationz
php artisan migrate:fresh  // to drop teh data in all the database table and register the tables and columns
php artisan migrate:rollback  // to rollback the migration
php artisan make:migration add_is_admin_to_users_table --table=users // to create a migration file

# storage/file related

php artisan storage:link // to link the main public directory to the storage public directory


// cache issues
php artisan cache:clear
php artisan config:clear
php artisan view:clear

// Intermediate Relationship 
return $this->hasManyThrough(Post::class, Follow::class, 'user_id', 'user_id', 'id', 'followeduser');
        // hasManyThrough(ResultTable, InterMediateTable,ResultForiegnKey, IntermediateForiegnKey, localKey, ResultTableLocalKey)
// seed
php artisan db:seed

This db:seed command will simply add new items to your tables but will not edit or delete any of your existing data. If instead you want a "clean slate" you can run this command:

php artisan migrate:fresh --seed

Be caseful with this command! It will completely erase all of your tables and data, then use your migration files to re-build all the tables, and finally use our seed data to populate the tables.

//install pkage for search
php require laravel/scout
php artisan vendor:publish --provider="Laravel\Scout\ScoutServiceProvider"

// Event,Broadcast Listner
php artisan event:generate // to creat the files form the EventServiceProvider import declerations

// For Pusher and Broadcast
composer require pusher/pusher-php-server
npm install laravel-echo pusher-js

channel(Server to client passed) => listen =>subscribe =>Event =>Broadcast => channel =>listen

// Mail commands
php artisan make:mail NewPostEmail
php artisan make:job SendNewPostEmail
php artisan queue:table
php artisan migrate
php artisan queue:work

// Schedule Tasks
php artisan schedule:work
php artisan schedule:run